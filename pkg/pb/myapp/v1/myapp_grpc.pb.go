// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: myapp/v1/myapp.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TgService_GetQuery_FullMethodName = "/myapp.v1.TgService/GetQuery"
	TgService_Hello_FullMethodName    = "/myapp.v1.TgService/Hello"
)

// TgServiceClient is the client API for TgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgServiceClient interface {
	GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error)
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type tgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTgServiceClient(cc grpc.ClientConnInterface) TgServiceClient {
	return &tgServiceClient{cc}
}

func (c *tgServiceClient) GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error) {
	out := new(GetQueryResponse)
	err := c.cc.Invoke(ctx, TgService_GetQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, TgService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TgServiceServer is the server API for TgService service.
// All implementations should embed UnimplementedTgServiceServer
// for forward compatibility
type TgServiceServer interface {
	GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error)
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// UnimplementedTgServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTgServiceServer struct {
}

func (UnimplementedTgServiceServer) GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedTgServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

// UnsafeTgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgServiceServer will
// result in compilation errors.
type UnsafeTgServiceServer interface {
	mustEmbedUnimplementedTgServiceServer()
}

func RegisterTgServiceServer(s grpc.ServiceRegistrar, srv TgServiceServer) {
	s.RegisterService(&TgService_ServiceDesc, srv)
}

func _TgService_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgServiceServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgService_GetQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgServiceServer).GetQuery(ctx, req.(*GetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TgService_ServiceDesc is the grpc.ServiceDesc for TgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myapp.v1.TgService",
	HandlerType: (*TgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuery",
			Handler:    _TgService_GetQuery_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _TgService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myapp/v1/myapp.proto",
}
